#!/usr/bin/env python
# coding: utf-8
# vim: set ts=4 sw=4 expandtab sts=4:
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <geier@lostpackets.de> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return Christian Geier
# ----------------------------------------------------------------------------


##############################
# imports {{{

#from IPython.Debugger import Tracer; debug_here = Tracer()
import StringIO
import sys
import argparse
import signal
from os import path

from ConfigParser import SafeConfigParser

try:
    import vobject
except ImportError:
    print "py-vobject not installed"
    sys.exit(1)

try:
    import lxml.etree as ET
except:
    print "py-lxml not installad"
    sys.exit(1)

try:
    import pycurl
except:
    print "pycurl not installed"
    sys.exit(1)


try:
    import sqlite3
except:
    print "pysqlite3 not installed"
    sys.exit(1)

# /imports
###########################}}}


def smartencode(string):
    unicode(string).encode("utf-8", "strict")





def signal_handler(signal, frame):
    sys.exit(0)

class PyCardDAV:
    def __init__(self):
        self.debug = ""
        self.user = ""
        self.passwd = ""
        self.resource = ""
        self.base_url = ""
        self.insecure_ssl = 0

    def get_abook(self):
        xml = self._get_xml_props()
        abook = self._process_xml_props(xml)
        return abook

    def get_vcard(self, vref):
        response = StringIO.StringIO()
        header = StringIO.StringIO()
        cursor = pycurl.Curl()
        cursor.setopt(pycurl.SSLVERSION, pycurl.SSLVERSION_SSLv3)
        cursor.setopt(pycurl.WRITEFUNCTION, response.write)
        cursor.setopt(pycurl.HEADERFUNCTION, header.write)
        cursor.setopt(pycurl.USERPWD, self.user+":"+self.passwd)
        cursor.setopt(pycurl.URL, self.base_url+vref)
        if (self.insecure_ssl == 1):
            cursor.setopt(pycurl.SSL_VERIFYPEER, 0)
        cursor.perform()
        cursor.close()

        header =  header.getvalue()
        vcard = response.getvalue()
        if (header.find("addressbook") == -1):
            print "URL is not a CardDAV resource"
            sys.exit(1)
        return vcard

    def _get_xml_props(self):
        response = StringIO.StringIO()
        header = StringIO.StringIO()
        curl = pycurl.Curl()
        curl.setopt(pycurl.WRITEFUNCTION, response.write)
        curl.setopt(pycurl.HEADERFUNCTION, header.write)
        curl.setopt(pycurl.USERPWD, self.user+":"+self.passwd)
        curl.setopt(pycurl.URL, self.resource)
        if (self.insecure_ssl == 1):
            curl.setopt(pycurl.SSL_VERIFYPEER, 0)
        curl.setopt(pycurl.SSLVERSION, pycurl.SSLVERSION_SSLv3)
        curl.setopt(pycurl.CUSTOMREQUEST, "PROPFIND")
        curl.perform()
        curl.close()
        header = header.getvalue()
        xml = response.getvalue()
        if (header.find("addressbook") == -1):
            print "URL is not a CardDAV resource"
            sys.exit(1)
        return xml

    def _process_xml_props(self, xml):
        namespace = "{DAV:}"
        element = ET.XML(xml)
        abook = dict()
        for response in element.iterchildren():
            if (response.tag == namespace+"response"):
                href = ""
                etag = ""
                insert = False
                for refprop in response.iterchildren():
                    if (refprop.tag == namespace+"href"):
                        href = refprop.text
                    for prop in refprop.iterchildren():
                        for props in prop.iterchildren():
                            if (props.tag == namespace+"getcontenttype" and props.text == "text/vcard"):
                                insert = True
                            if (props.tag == namespace+"getetag"):
                                etag = props.text
                            #print("%s - %s" % (props.tag, props.text))
                        if insert:
                            abook[href] = etag
        return abook

class DbTool:
    def __init__(self):
        self.db_path = ""
        self.debug = 0

    def make_tables(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute('''CREATE TABLE version ( version INTEGER )''')
            if self.debug:
                print "created version table"
        except sqlite3.OperationalError as detail:
            if self.debug:
                print detail
        except:
            sys.stderr.write('Failed to connect to database, Unknown Error')
        conn.commit()
        # VERSION information
        stuple = (2,) # database version db Version
        cursor.execute('INSERT INTO version (version) VALUES (?)', stuple)
        conn.commit()
        try:
            cursor.execute('''CREATE TABLE vcardtable (
                    href TEXT PRIMARY KEY NOT NULL,
                    etag TEXT,
                    name TEXT,
                    edited INT
                    )''')
            if self.debug:
                print "created vcardtable"
        except sqlite3.OperationalError as detail:
            if self.debug:
                print detail
        except:
            sys.stderr.write('Failed to connect to database, Unknown Error')
        conn.commit()
        # properties table
        try:
            cursor.execute('''CREATE TABLE properties (
            id INTEGER PRIMARY KEY NOT NULL,
            property TEXT NOT NULL,
            value TEXT,
            href TEXT NOT NULL,
            FOREIGN KEY(href) REFERENCES vcardtable(href)
            )''')
            if self.debug:
                print "created properties table"
        except sqlite3.OperationalError as detail:
            if self.debug:
                print detail
        except:
            sys.stderr.write('Failed to connect to database, Unknown Error')
        conn.commit()
        # parameter table
        try:
            cursor.execute('''CREATE TABLE parameters(
            parameter TEXT NOT NULL,
            value TEXT,
            href TEXT NOT NULL,
            property_id INTEGER NOT NULL,
            FOREIGN KEY(href) REFERENCES vcardtable(href),
            FOREIGN KEY(property_id) REFERENCES properties(id)
            )''')
            if self.debug:
                print "created parameters table"
        except sqlite3.OperationalError as detail:
            if self.debug:
                print detail
        except:
            sys.stderr.write('Failed to connect to database, Unknown Error')
        conn.commit()
        cursor.close()

    def check_new_etag(self, vref, v_etag):
        """returns True when the etag has been updated, otherwise False"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        stuple = (vref,)
        cursor.execute('SELECT etag FROM vcardtable WHERE href=(?);', stuple)
        if v_etag == cursor.fetchall()[0][0]:
            return_code = False
        else:
            return_code = True
        conn.commit()
        cursor.close()
        return return_code

    def check_vref_exists(self, vref):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        stuple = (vref,)
        cursor.execute('SELECT count(*) FROM vcardtable WHERE href=(?);', stuple)
        if cursor.fetchall() == [(1,)]:
            return_code = False
        else:
            return_code = True
        conn.commit()
        cursor.close()
        return return_code

    def insert_vref(self, vref):
        """inserts vref into the vcardtable"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        stuple = (vref,)
        cursor.execute('INSERT INTO vcardtable (href) VALUES (?);', stuple)
        conn.commit()
        cursor.close()

    def update_etag(self, vref, v_etag):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        stuple = (v_etag, vref)
        cursor.execute('UPDATE vcardtable SET etag=(?) WHERE href=(?);', stuple)
        conn.commit()
        cursor.close()
        return True

    def delete_vcard_from_db(self, vref):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        stuple = (vref,)
        cursor.execute('DELETE from properties WHERE href=(?)', stuple)
        conn.commit()
        cursor.close()

    def insert_vcard_in_db(self, vref, vcard):
        if vcard.name == "VCARD":
            vcard.prettyPrint()
            for line in vcard.getChildren():
                try:
                    line.transformFromNative()
                except:
                    pass

                property_name = line.name
                property_value = line.value
                # for now, we cannot handle photos (or any other binary data):
                if (property_name == "PHOTO"):
                    pass
                else:
                    conn = sqlite3.connect(self.db_path)
                    cursor = conn.cursor()
                    stuple = (unicode(property_name), unicode(property_value), vref)

                    cursor.execute('INSERT INTO properties (property, value, href) VALUES (?,?,?);', stuple)
                    lastrowid = cursor.lastrowid
                    if line.params:
                        for key in line.params.keys():
                            for key_value in line.params[key]:
                                stuple = (key, key_value, vref, lastrowid)
                                cursor.execute('INSERT INTO parameters (parameter, value, href,property_id) VALUES (?,?,?,?);', stuple)
                                #print key + ": " + i
                    conn.commit()
                    cursor.close()
        else:
            return -1 # this is not a vcard



def main(argv):
    # trying to hide some ugly python code on pressing Ctrl-C
    signal.signal(signal.SIGINT, signal_handler)

    my_dbtool = DbTool()
    syncer = PyCardDAV()

    arg_parser = argparse.ArgumentParser(
            description = "syncs the local db to the CardDAV server")
    arg_parser.add_argument(
        "-c", "--config", action = "store", dest = "configfile",
        default = "~/.pycard/pycard.conf",
        help="defaults to ~/.pycard/pycard.conf")
    arg_parser.add_argument("-v", "--version", action = "version", version = "0.3.1")
    arg_parser.add_argument("--debug", action = "store_true", dest = "debug",
            default = "False", help = "enable debugging")
    args = arg_parser.parse_args()

    #config file foo
    configfile = path.expanduser(args.configfile)
    if args.debug:
        print "reading config from ", configfile
    conf_parser = SafeConfigParser()
    conf_parser.read(configfile)
    syncer.user = conf_parser.get('default', 'user')
    syncer.passwd = conf_parser.get('default', 'passwd')
    syncer.resource = conf_parser.get('default', 'resource')
    syncer.base_url = conf_parser.get('default', 'base_url')
    syncer.insecure_ssl = conf_parser.getint('default', 'insecure_ssl')
    my_dbtool.db_path = path.expanduser(conf_parser.get('default', 'db_path'))
    my_dbtool.debug = conf_parser.getint('default', 'DEBUG')
    my_dbtool.debug = args.debug #argument overrides config file
    syncer.debug = conf_parser.getint('default', 'DEBUG')
    syncer.debug = args.debug #argument overrides config file
    if my_dbtool.debug:
        print "using remote options:"
        print "  user:", syncer.user
        print "  passwd:", syncer.passwd
        print "  resource:", syncer.resource
        print "  base_url:", syncer.base_url
        print "  insecureSSL:", syncer.insecure_ssl
        print "using local options:"
        print "  db_path:", my_dbtool.db_path
        print "\n"

    my_dbtool.make_tables()
    abook = syncer.get_abook()


    for vref, v_etag  in abook.iteritems():
        if my_dbtool.check_vref_exists(vref):
            my_dbtool.insert_vref(vref)
        
        if my_dbtool.check_new_etag(vref, v_etag):
            my_dbtool.delete_vcard_from_db(vref)
            if args.debug:
                print "getting ", vref, " etag: ", v_etag
            vcard = syncer.get_vcard(vref)
            vcard = vobject.readOne(vcard)

            # this is the important part
            try:
                my_dbtool.insert_vcard_in_db(vref, vcard)
                my_dbtool.update_etag(vref, v_etag)
            except Exception, err:
                sys.stderr.write("ERROR: something went wrong while inserting VCard %s into the db\n" % str(vref))
                sys.stderr.write('%s\n' % str(err))


if __name__ == "__main__":
    main(sys.argv[1:])

