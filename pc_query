#!/usr/bin/env python
# vim: set ts=4 sw=4 expandtab sts=4:
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <geier@lostpackets.de> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return Christian Geier
# ----------------------------------------------------------------------------

"""
utility for querying the database
"""

import sys
import signal
from os import path
import argparse
from ConfigParser import SafeConfigParser
import pycard

try:
    from termcolor import cprint

    def print_bold(text):
        """prints text bold"""
        cprint(text, attrs=['bold'])
except ImportError:

    def print_bold(text):
        """prints text bold"""
        print(text)


def signal_handler(signal, frame):
    """
    tries to hide some ugly python backtraces from the user after
    pressing ctrl-c
    """
    sys.exit(0)


def main():
    """main function, everything starts  here"""
    configfile = "~/.pycard/pycard.conf"

    parser = argparse.ArgumentParser(
        description = 'prints contacts cards matching a search string')
    parser.add_argument(
        "-c", "--config", action = "store", dest = "configfile",
        default = "~/.pycard/pycard.conf",
        help="defaults to ~/.pycard/pycard.conf")
    parser.add_argument("-v", "--version", action = "version", version = "0.3.2")
    parser.add_argument("-a", action = "store_true", dest = "display_all",
            default = "False", help = "prints the whole card, not only name, "
            "telephone numbers and email addresses")
    parser.add_argument("-m", dest = "print_function", action = "store_const",
            const = "print_email", default = "print_contact_info",
            help = "only prints email addresses, in a mutt friendly format")
    parser.add_argument("-e", dest = "edit", action = "store_true",
            default = "False", help="edit the contact file")
    parser.add_argument("--debug", action = "store_true", dest = "debug",
            default = "False", help = "enable debugging")
    parser.add_argument("search_string", metavar = "SEARCHSTRING",
            help = "the string to search for")
    args = parser.parse_args()

    # let's try to hide some ugly python code, at least when hitting Ctrl-C
    signal.signal(signal.SIGINT, signal_handler)
    configfile = path.expanduser(args.configfile)

    parser = SafeConfigParser()
    parser.read(configfile)
    db_path = path.expanduser(parser.get('default', 'db_path'))
    # testing if the db exists
    if not path.exists(db_path):
        sys.exit(str(db_path) + " file does not exist, please sync with "
                "pycardsyncer first.")


    my_query = pycard.PcQuery()
    my_query.db_path = path.expanduser(db_path)
    my_query.debug = args.debug

    # editing a card:
    if (args.edit == True):
        contact = my_query.select_entry(args.search_string.decode("utf-8"))
        while True:
            contact.edit()
            for prop in contact:
                if prop.edited == 1:
                    contact.edited = 1
            print ""
            contact.print_contact_info(True)
            while 1:
                edit = raw_input("Is this correct [y/N]? ")
                if edit in [u"y", "y", u"Y", "Y"]:
                    contact.save()
                    sys.exit()
                if edit in [u"n", "n", u"N", "N"]:
                    return 0
        return 0

    my_query.print_function = args.print_function
    my_query.display_all = args.display_all

    print "searching for " + args.search_string + "..."
    my_query.search(args.search_string.decode("utf-8"))

    return 0

if __name__ == "__main__":
    main()
