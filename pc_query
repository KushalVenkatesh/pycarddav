#!/usr/bin/env python
# vim: set ts=4 sw=4 expandtab sts=4:
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <geier@lostpackets.de> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return Christian Geier
# ----------------------------------------------------------------------------

"""
utility for querying the database
"""

import sys
import signal
from os import path
import argparse
from ConfigParser import SafeConfigParser

try:
    import sqlite3
except ImportError:
    print "pysqlite3 not installed"
    sys.exit(1)


#encoding = 'utf-8'
#errors = 'strict'



class PcQuery:
    """Querying the addressbook database"""
    def __init__(self, db_path = "~/.pycacard/abook.db",
                 encoding = "utf-8", errors = "strict", debug = False):
        self.db_path = path.expanduser(db_path)
        self.encoding = encoding
        self.errors = errors
        self.debug = debug
        self.display_all = False
        self.search_string = ""
        self.print_function = "print_contact_info"

    def search(self):
        """
        this is the main method
        first we get the list of contact_ids matching the search string
        then these are printed using the different print functions
        """
        contact_ids = self.get_contact_id_from_string()
        for contact_id in contact_ids:
            if self.print_function == "print_email":
                self.print_email(contact_id[0], True, 1)
            else:
                self.print_contact_info(contact_id[0], self.display_all, 1)

    def get_contact_id_from_string(self):
        """returns list of ids from db matching search_string"""
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        t = ('%'+ self.search_string +'%',)
        c.execute('SELECT href FROM properties WHERE value LIKE (?)', t)
        result = c.fetchall()
        result = list(set(result))
        return result

    def print_contact_info(self, v_ref, display_all, more_than_one):
        """
        this is a more or less a clone of vobjects prettyPrint()
        all the ugly stuff happens here, the disgusting internals should
        probably be hidden in another class
        """
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        t = (v_ref,)
        c.execute('SELECT * FROM properties WHERE href=(?)', t)
        result = c.fetchall()
        card = dict()
        for i in result:
            if not card.has_key(i[1]):
                card[i[1]] = list()
            t = (i[0],)
            c.execute('SELECT parameter,value FROM parameters WHERE '
            'property_id=(?)', t )
            parameters = c.fetchall()
            parameter_string = str()
            if not parameters == list():
                for parameter in parameters:
                    if parameter[0] == "TYPE":
                        if not parameter_string == str():
                            parameter_string += ", "
                        parameter_string += parameter[1]
            card[i[1]].append((i[2], parameter_string))
        print "Name: " + card["FN"][0][0]
        del(card["FN"])
        for parameter_list in ("EMAIL","TEL"):
            if card.has_key(parameter_list):
                for parameter in card[parameter_list]:
                    s = ""
                    s += parameter_list.title()

                    if not parameter[1] == list():
                        s += " ("
                        s += parameter[1].title()
                        s += ")"
                    s += ": " +  parameter[0]
                    print s
                del(card[parameter_list])
        if display_all == True:
            for param_type in card:
                s = ""
                s += param_type
                if not card[param_type][0][1] == str():
                    s += " (" + card[param_type][0][1] + ")"
                s += ": "
                s += card[param_type][0][0]
                print s
        if more_than_one:
            print "\n"

        c.close()

    def print_email(self, v_ref, ignore, ignore1):
        """
        maimed print contact info, for use with mutt
        hardly any prettier
        """
        conn = sqlite3.connect(self.db_path)
        c = conn.cursor()
        t = (v_ref,)
        c.execute('SELECT * FROM properties WHERE href=(?)', t)
        result = c.fetchall()
        card = dict()
        for i in result:
            if not card.has_key(i[1]):
                card[i[1]] = list()
            t = (i[0],)
            c.execute('SELECT parameter,value FROM parameters WHERE '
                      'property_id=(?)', t)
            parameters = c.fetchall()
            parameter_string = str()
            if not parameters == list():
                for parameter in parameters:
                    if parameter[0] == "TYPE":
                        if not parameter_string == str():
                            parameter_string += ", "
                        parameter_string += parameter[1]
            card[i[1]].append((i[2], parameter_string))
        name = card["FN"][0][0]
        del(card["FN"])
        for parameter_list in ("EMAIL",):
            if card.has_key(parameter_list):
                for parameter in card[parameter_list]:
                    s = name + " "

                    if not parameter[1] == list():
                        s += " ("
                        types = parameter[1].title()
                        s += ")"
                    email = parameter[0]
                    print email + "\t" + name +"\t" + types
                del(card[parameter_list])
        c.close()

def signal_handler(signal, frame):
    """
    tries to hide some ugly python backtraces from the user after
    pressing ctrl-c
    """
    sys.exit(0)

# MAIN
def main(argv):
    """main function, everything starts  here"""
    configfile = "~/.pycard/pycard.conf"

    parser = argparse.ArgumentParser(
        description = 'prints contacts cards matching a search string')
    parser.add_argument(
        "-c", "--config", action = "store", dest = "configfile",
        default = "~/.pycard/pycard.conf",
        help="defaults to ~/.pycard/pycard.conf")
    parser.add_argument("-v", "--version", action = "version", version = "0.3")
    parser.add_argument("-a", action = "store_true", dest = "display_all",
            default = "False", help = "prints the whole card, not only name, "
            "telephone numbers and email addresses")
    parser.add_argument("-m", dest = "print_function", action = "store_const",
            const = "print_email", default = "print_contact_info",
            help = "only prints email addresses, in a mutt friendly format")
    parser.add_argument("--debug", action = "store_true", dest = "debug",
            default = "False", help = "enable debugging")
    parser.add_argument("search_string", metavar = "SEARCHSTRING",
            help = "the string to search for")
    args = parser.parse_args()

    # let's try to hide some ugly python code, at least when hitting Ctrl-C
    signal.signal(signal.SIGINT, signal_handler)
    configfile = path.expanduser(args.configfile)

    parser = SafeConfigParser()
    parser.read(configfile)
    db_path = path.expanduser(parser.get('default', 'db_path'))

    print "searching for ", args.search_string, "..."

    my_query = PcQuery()
    my_query.db_path = path.expanduser(db_path)
    my_query.search_string = args.search_string.decode(my_query.encoding, my_query.errors)
    my_query.debug = args.debug
    my_query.print_function = args.print_function
    my_query.display_all = args.display_all

    my_query.search()


    return 0

if __name__ == "__main__":
    main(sys.argv[1:0])
