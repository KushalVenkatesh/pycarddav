#!/usr/bin/env python
# vim: set ts=4 sw=4 expandtab sts=4:
# Copyright (c) 2011-2012 Christian Geier, David Soulayrol
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

try:
    import logging
    import sys

    from pycarddav import ConfigurationParser
    from pycarddav import controllers
    from pycarddav import capture_user_interruption

except ImportError as error:
    sys.stderr.write(str(error))
    sys.exit(1)


class SyncConfigurationParser(ConfigurationParser):
    """A specialized setup tool for synchronization."""
    def __init__(self):
        ConfigurationParser.__init__(self, "syncs the local db to the CardDAV server")

        self._arg_parser.add_argument(
            "-a", "--account", action="append", dest="sync__accounts",
            metavar="NAME", help="use only the NAME account (can be used more than once)")

    def check(self, ns):
        result = ConfigurationParser.check(self, ns)

        accounts = [account.name for account in ns.accounts]
        if ns.sync.accounts:
            for name in set(ns.sync.accounts):
                if not name in [a.name for a in ns.accounts]:
                    logging.warn('Uknown account %s', name)
                    ns.sync.accounts.remove(name)
            if len(ns.sync.accounts) == 0:
                logging.error('No valid account selected')
                result = False
        else:
            ns.sync.accounts = accounts

        ns.sync.accounts = set(ns.sync.accounts)

        return result

capture_user_interruption()

# Read configuration.
conf_parser = SyncConfigurationParser()
conf = conf_parser.parse()
if conf is None:
    sys.exit(1)

if conf.debug:
    conf_parser.dump(conf)

rvalue = 0
for one in conf.accounts:
    if one.name in conf.sync.accounts:
        logging.debug('start syncing account {}'.format(one.name))
        conf.account = one
        try:
            controllers.sync(conf)
        except Exception as error:
            if conf.debug:
                raise error
            logging.critical('While syncing account "{}" an error occured:\n  '.format(one.name) + str(error))
            rvalue = 1

sys.exit(rvalue)
