#!/usr/bin/env python
# vim: set ts=4 sw=4 expandtab sts=4:
# Copyright (c) 2011-2012 Christian Geier, David Soulayrol
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

try:
    import getpass
    import logging
    import sys

    from pycarddav import ConfigurationParser
    from pycarddav import controllers
    from pycarddav import capture_user_interruption

    from netrc import netrc
    from urlparse import urlsplit

except ImportError as error:
    sys.stderr.write(str(error))
    sys.exit(1)


class SyncConfigurationParser(ConfigurationParser):
    """A specialized setup tool for synchronization."""
    def __init__(self):
        ConfigurationParser.__init__(self, "syncs the local db to the CardDAV server")

    def check(self, conf):
        ConfigurationParser.check(self, conf)

        result = self.check_property(conf, 'sqlite.path')
        result &= self.check_property(conf, 'accounts')
        if result:
            for account in conf.accounts:
                result &= self.check_account(account)

        return result

    def check_account(self, account):
        if not self.check_property(account, 'resource', 'account.resource'):
            return False

        result = True
        if not len(account.passwd):
            hostname = urlsplit(account.resource).hostname
            auths = netrc().authenticators(hostname)
            if auths:
                if not account.user or auths[0] == account.user:
                    logging.debug("Read password for user %s on %s in .netrc",
                                  auths[0], hostname)
                    account.user = auths[0]
                    account.passwd = auths[2]
                else:
                    logging.error("User %s not found for %s in .netrc",
                                  account.user, hostname)
                    result = False
            elif account.user:
                account.passwd = getpass.getpass(prompt='CardDAV password: ')
            else:
                logging.error("Missing credentials for %s", hostname)
                result = False

        return result

capture_user_interruption()

# Read configuration.
conf_parser = SyncConfigurationParser()
conf = conf_parser.parse()
if conf is None:
    sys.exit(1)

if conf.debug:
    conf_parser.dump(conf)

controllers.sync(conf)
